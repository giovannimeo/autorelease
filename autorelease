#!/bin/bash

autoreleasefullpath=`readlink -f $0`
autoreleasebasedir=`dirname ${autoreleasefullpath}`
# GIT root for the ODL repositories
odlreporoot="https://git.opendaylight.org/gerrit/"
# GIT root for the mirrors if any to push the tags
gitpushroot=""
repositoryList="yangtools.git controller.git openflowjava.git openflowplugin.git ovsdb.git affinity.git opendove.git snmp4sdn.git vtn.git bgpcep.git lispflowmapping.git integration.git"
repogitbase="${autoreleasebasedir}/gits"
stagingreleasesm2repo="${autoreleasebasedir}/stagingreleases/m2repo"
stagingreleasesgits="${autoreleasebasedir}/stagingreleases/gitbundles"
patchesdir="${autoreleasebasedir}/patches"
toolsrepodir="${autoreleasebasedir}/toolsrepo"
settingstemplatefile="${autoreleasebasedir}/localreleasesettings.xml.tmpl"
settingsfile="${autoreleasebasedir}/localreleasesettings.xml"
branchforrelease='master'
logdir="${autoreleasebasedir}/logs"
mavenprofiles="integrationtests,jni"
clean_repo=0
version_date_prefix=`date '+v%Y%m%d%H%M%S'`
declare -A override_branch
# Run only on one repository useful for incremental tests
onlyone=0

function usage {
    echo "Usage: $0 [--restart_from <target>] [--repositoryList <space separated repository list>] [--odlreporoot <url of ODL repos or mirror of it>] [--onlyone] [--clean_repo] [--override_branch <repo to override> <branch to use>] [--profiles <profiles to activate>]"
    exit 1
}

unknown_option=0
restart_from=""
while true ; do
    case "$1" in
        --override_branch) shift; override_branch["$1"]="$2"; shift; shift;;
        --clean_repo) clean_repo=1; shift;;
        --restart_from) shift; restart_from="$1"; shift;;
        --repositoryList) shift; repositoryList="$1"; shift;;
        --odlreporoot) shift; odlreporoot="$1"; shift;;
        --onlyone) onlyone=1; shift;;
        --branch) shift; branchforrelease="$1"; shift;;
        --profiles) shift; mavenprofiles="$1"; shift;;
	-*) echo "Unknown option $1"; unknown_option=1; shift;;
	*) break ;;
    esac
done

if [ "${unknown_option}" == "1" ]; then
    usage
    exit 1
fi

# Make sure maven doesn't run out of memory
export MAVEN_OPTS="-Xmx2048m -XX:MaxPermSize=512m"

# First of all lets make sure we build the toolsrepo
cd "${autoreleasebasedir}/versions-plugin"
mvn -DaltDeploymentRepository="localdir::default::file://${toolsrepodir}" clean deploy

skip_initial=0
if [ "${restart_from}" == "" ]; then
    # Cleanup
    rm -rf "${repogitbase}"
    mkdir -p "${repogitbase}"
    rm -rf "${stagingreleasesm2repo}"
    mkdir -p "${stagingreleasesm2repo}"
    rm -rf "${stagingreleasesgits}"
    mkdir -p "${stagingreleasesgits}"
    rm -rf "${settingsfile}"
    rm -rf "${logdir}"
    mkdir -p "${logdir}"

    # Now lets create localreleasesettings.xml
    cp "${settingstemplatefile}" "${settingsfile}"
    sed -i "s!#STAGINGREPODIR#!${stagingreleasesm2repo}!g" "${settingsfile}"
    sed -i "s!#TOOLSREPODIR#!${toolsrepodir}!g" "${settingsfile}"
else 
    skip_initial=1
fi

firstrun=1
for repouri in $repositoryList; do
    repo=`basename ${repouri}`
    if [ "${repo}" == "${repouri}" ]; then
        repouri="${odlreporoot}/${repo}"
    fi
    if [ "${skip_initial}" == "1" ]; then
        if [ "${restart_from}" == "${repo}" ]; then
            # We run into the repo we last did so from next we will
            # restart
            skip_initial=0
        fi
        # If still skiping the repo then lets do it
        if [ "${skip_initial}" == "1" ]; then
            echo "Skipping ${repo}"
            continue
        fi
    fi

    # In case of only one run exit after first run
    if [ "${onlyone}" == "1" ]; then
        if [ "${firstrun}" == "0" ]; then echo "done one run so now exiting"; exit 0; fi
    fi

    # Toggle first run after first execution
    if [ "${firstrun}" == "1" ]; then
        firstrun=0
    fi

    cd "${repogitbase}"
    if [ "${clean_repo}" == "1" ]; then
        rm -rf "${repogitbase}/${repo}"
    fi
    git clone "${repouri}" "${repo}"|| exit 1
    cd "${repogitbase}/${repo}"
    localm2repo="${repogitbase}/${repo}/.m2repo"
    localdeployrepo="${repogitbase}/${repo}/deployrepo"
    locallogsdir="${logdir}/${repo}"
    mkdir -p "${locallogsdir}"
    branchforrepo="${branchforrelease}"
    if [ "${override_branch[${repo}]}" == "" ]; then
        branchforrepo="${branchforrelease}"
    else
        branchforrepo="${override_branch[${repo}]}"
    fi
    echo "Using as base branch ${branchforrepo}"
    git checkout "origin/${branchforrepo}" -b baseforrelease_initial
    git checkout "origin/${branchforrepo}" -b baseforrelease
    # Now check if exist a patch file for this repo in that case apply
    # them to the baseforrelease branch because it means they are
    # still to go out on the master 
    if [ -f "${patchesdir}/${branchforrepo}/${repo}" ]; then
        echo "Applying patches ${patchesdir}/${branchforrepo}/${repo}"
        git am "${patchesdir}/${branchforrepo}/${repo}" || exit 1
    fi
    # Update the version to the latest ones in the repo
    mvn -Dmaven.repo.local="${localm2repo}" -U -s "${settingsfile}" -Dversions.repoFilter="stagingrepodir" -Dincludes='org.opendaylight*' -P"${mavenprofiles}" -B org.codehaus.mojo:versions-maven-plugin:2.2-autorelease-SNAPSHOT:rewritepom-to-latest-versions -l "${locallogsdir}/changeversion.log"
    # Commit the change done by use-latest-versions
    git commit -a -s -m "Updated to newer local release versions" && echo "Updated artifacts"
    
    ${autoreleasebasedir}/localrelease --localm2repo "${localm2repo}" --settingsfile "${settingsfile}" --stagingrepodir "${stagingreleasesm2repo}" --localrepodir "${localdeployrepo}" --logsdir "${locallogsdir}" --profiles "${mavenprofiles}" --version_date_prefix "${version_date_prefix}" --gitbundlerepo "${stagingreleasesgits}/${repo}"
    if [ ! $? == 0 ]; then
        echo "Release failed for $repo"
        exit 1
    fi
    
    # Now stage the released artifacts
    mvn -s "${settingsfile}" -Dwagon.source="file://${localdeployrepo}" -Dwagon.target="file://${stagingreleasesm2repo}" wagon:merge-maven-repos -l "${locallogsdir}/merge-maven-repos.log"
done

# On success exit with result 0
exit 0
