#!/bin/bash

autoreleasefullpath=`readlink -f $0`
autoreleasebasedir=`dirname ${autoreleasefullpath}`
# GIT root for the ODL repositories
odlreporoot="https://git.opendaylight.org/gerrit/"
# GIT root for the mirrors if any to push the tags
gitpushroot=""
repositoryList="yangtools.git controller.git ovsdb.git openflowjava.git openflowplugin.git bgpcep.git affinity.git"
repogitbase="${autoreleasebasedir}/gits"
stagingreleases="${autoreleasebasedir}/stagingreleases"
patchesdir="${autoreleasebasedir}/patches"
toolsrepodir="${autoreleasebasedir}/toolsrepo"
settingstemplatefile="${autoreleasebasedir}/localreleasesettings.xml.tmpl"
settingsfile="${autoreleasebasedir}/localreleasesettings.xml"
branchforrelease='origin/master'
logdir="${autoreleasebasedir}/logs"
mavenprofiles="integrationtests"
# Run only on one repository useful for incremental tests
onlyone=0

function usage {
    echo "Usage: $0 [--restart_from <target>] [--repositoryList <space separated repository list>] [--odlreporoot <url of ODL repos or mirror of it>] [--onlyone]"
    exit 1
}

unknown_option=0
restart_from=""
while true ; do
    case "$1" in
        --restart_from) shift; restart_from="$1"; shift;;
        --repositoryList) shift; repositoryList="$1"; shift;;
        --odlreporoot) shift; odlreporoot="$1"; shift;;
        --onlyone) onlyone=1; shift;;
	-*) echo "Unknown option $1"; unknown_option=1; shift;;
	*) break ;;
    esac
done

if [ "${unknown_option}" == "1" ]; then
    usage
    exit 1
fi

# Make sure maven doesn't run out of memory
export MAVEN_OPTS="-Xmx2048m -XX:MaxPermSize=512m"

skip_initial=0
if [ "${restart_from}" == "" ]; then
    # Cleanup
    rm -rf "${repogitbase}"
    mkdir -p "${repogitbase}"
    rm -rf "${stagingreleases}"
    mkdir -p "${stagingreleases}"
    rm -rf "${settingsfile}"
    rm -rf "${logdir}"
    mkdir -p "${logdir}"

    # Now lets create localreleasesettings.xml
    cp "${settingstemplatefile}" "${settingsfile}"
    sed -i "s!#STAGINGREPODIR#!${stagingreleases}!g" "${settingsfile}"
    sed -i "s!#TOOLSREPODIR#!${toolsrepodir}!g" "${settingsfile}"
else 
    skip_initial=1
fi

firstrun=1
for repouri in $repositoryList; do
    repo=`basename ${repouri}`
    if [ "${repo}" == "${repouri}" ]; then
        repouri="${odlreporoot}/${repo}"
    fi
    if [ "${skip_initial}" == "1" ]; then
        if [ "${restart_from}" == "${repo}" ]; then
            # We run into the repo we last did so from next we will
            # restart
            skip_initial=0
        fi
        # If still skiping the repo then lets do it
        if [ "${skip_initial}" == "1" ]; then
            echo "Skipping ${repo}"
            continue
        fi
    fi

    # In case of only one run exit after first run
    if [ "${onlyone}" == "1" ]; then
        if [ "${firstrun}" == "0" ]; then echo "done one run so now exiting"; exit 0; fi
    fi

    # Toggle first run after first execution
    if [ "${firstrun}" == "1" ]; then
        firstrun=0
    fi

    cd "${repogitbase}"
    git clone "${repouri}" "${repo}"|| exit 1
    cd "${repogitbase}/${repo}"
    localm2repo="${repogitbase}/${repo}/.m2repo"
    localdeployrepo="${repogitbase}/${repo}/deployrepo"
    locallogsdir="${logdir}/${repo}"
    mkdir -p "${locallogsdir}"
    git checkout ${branchforrelease} -b baseforrelease
    # Now check if exist a patch file for this repo in that case apply
    # them to the baseforrelease branch because it means they are
    # still to go out on the master 
    if [ -f "${patchesdir}/${repo}" ]; then
        echo "Applying patches ${patchesdir}/${repo}"
        git am "${patchesdir}/${repo}" || exit 1
    fi
    # Update the version to the latest ones in the repo
    mvn -Dmaven.repo.local="${localm2repo}" -U -s "${settingsfile}" -Dincludes='org.opendaylight*' -P"${mavenprofiles}" -B org.codehaus.mojo:versions-maven-plugin:2.2-autorelease-SNAPSHOT:rewritepom-to-latest-versions -l "${locallogsdir}/changeversion.log"
    # Commit the change done by use-latest-versions
    git commit -a -s -m "Updated to newer local release versions" && echo "Updated artifacts"
    
    ${autoreleasebasedir}/localrelease --localm2repo "${localm2repo}" --settingsfile "${settingsfile}" --stagingrepodir "${stagingreleases}" --localrepodir "${localdeployrepo}" --logsdir "${locallogsdir}" --profiles "${mavenprofiles}" && echo "Release failed for ${repo}" || exit 1
    
    # Now stage the released artifacts
    mvn -Dwagon.source="file://${localdeployrepo}" -Dwagon.target="file://${stagingreleases}" wagon:merge-maven-repos -l "${locallogsdir}/merge-maven-repos.log"
done

# On success exit with result 0
exit 0
