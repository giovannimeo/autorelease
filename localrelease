#!/bin/bash

# This script force maven release plugin 2.5 because it has:
# http://jira.codehaus.org/browse/MRELEASE-767
# http://jira.codehaus.org/browse/MRELEASE-812
# Very much needed for GIT repositories

function usage {
    echo "Usage: $0 [--ignoresnapshots] [--debug] [--localrepodir <local repo directory>] [--stagingrepodir <staging repo directory>] [--profiles <profiles to enable>] [--logsdir <log directory>] [--domajor] [--globalmavensettings <settings file>] [--mvn_opts <opts>]"
    exit 1
}

# Get the full path of the current directory
fullpath=`readlink -f "${PWD}"`
basedir="${fullpath}"
scriptdirpath=`readlink -f $0`
scriptdir=`dirname ${scriptdirpath}`
ignoresnapshots="false"
debug=0
unknown_option=0
profiles="integrationtests"
globalmavensettings=""
# By default use a localrepodir for deploy and local resolution that is in the current directory
localrepodir="${basedir}/localrepodir"
stagingrepodir="${scriptdir}/stagingreleases"
logsdir="${scriptdir}/logs"
settingsfile="${scriptdir}/localreleasesettings.xml"
localm2repo="${basedir}/.m2repo"
version_date_prefix=`date '+v%Y%m%d%H%M%S'`
gitbundlerepo=""
domajor=0
mvn_opts=""
# clean the local m2repo on each run
cleanlocalm2repo=0
while true ; do
    case "$1" in
        --mvn_opts) shift; mvn_opts="$1"; shift;;
        --cleanlocalm2repo) cleanlocalm2repo=1; shift;;
        --localm2repo) shift; localm2repo="$1"; shift;;
        --settingsfile) shift; settingsfile="$1"; shift;;
        --domajor) domajor=1; shift;;
        --ignoresnapshots) ignoresnapshots="true"; shift;;
        --debug) debug=1; shift;;
        --localrepodir) shift; localrepodir="$1"; shift;;
        --profiles) shift; profiles="$1"; shift;;
        --logsdir) shift; logsdir="$1"; shift;;
        --stagingrepodir) shift; stagingrepodir="$1"; shift;;
        --version_date_prefix) shift; version_date_prefix="$1"; shift;;
        --gitbundlerepo) shift; gitbundlerepo="$1"; shift;;
        --globalmavensettings) shift; globalmavensettings="$1"; shift;;
        -*) echo "Unknown option $1"; unknown_option=1; shift;;
        *) break ;;
    esac
done

if [ "${unknown_option}" == "1" ]; then
    usage
    exit 1
fi

# Allow to override the global maven settings to get site-wide options
if [ "${globalmavensettings}" == "" ]; then
    settingsopts="-s \"${settingsfile}\""
else
    # NOTE WELL: If present globalmavensettings is already with quotes
    settingsopts="-s \"${settingsfile}\" -gs ${globalmavensettings}"
fi

echo "LOCALRepo Directory is: ${localrepodir}"
echo "STAGINGRepo Directory is: ${stagingrepodir}"
echo "SettingOpts: ${settingsopts}"
echo "MvnOpts: ${mvn_opts}"
# Make sure to escape /\: so if you want to get \: you have to write \\\:
#localscm="scm\\\:git\\\:ssh\\\:\/\/xnc-build.cisco.com\/gerrit\\\:29418\/odp-openflowjava-mirror"

basebranch="baseforrelease"
git show-ref --verify --quiet "refs/heads/${basebranch}"
branchdoesntexist=$?
if [ ${branchdoesntexist} != 0 ]; then
    echo "Noone setup the baseforrelease branch"
    exit 1
fi

basebranch_initial="baseforrelease_initial"
git show-ref --verify --quiet "refs/heads/${basebranch_initial}"
branchdoesntexist=$?
if [ ${branchdoesntexist} != 0 ]; then
    echo "Noone setup the baseforrelease_initial branch"
    exit 1
fi

gitshorthead=`git log ${basebranch_initial} --pretty="%h" -n 1`
if [ "${gitshorthead}" != "" ]; then gitshorthead="_${gitshorthead}"; fi
lockedversion="${version_date_prefix}${gitshorthead}"

# Now let see if we have an update version tag in that case lets include in the bundle create
updateversiontag=""
git show-ref refs/tags/update-cross-project-versions && updateversiontag=update-cross-project-versions

# Now save the repository in git bundle if a file is provided, till this point
if [ ! "${gitbundlerepo}" == "" ]; then
    git bundle create "${gitbundlerepo}" "${basebranch_initial}" "${basebranch}" ${updateversiontag}
fi

if [ ${debug} == 1 ]; then
    echo "VERSION:${lockedversion}"
fi

preparationbranch="preparation-branch-${lockedversion}"
preparationtag="preparation-tag-${lockedversion}"

if [ ${cleanlocalm2repo} == 1 ]; then
    echo "Cleaning local m2repo before the preparation-branch build"
    rm -rf "${localm2repo}"
fi

# Checkout new branch and try to prepare for the release
# with the expected version number
git checkout -f "${basebranch}" -b "${preparationbranch}" && mvn -Dmaven.repo.local="${localm2repo}" -Dorg.ops4j.pax.url.mvn.localRepository="${localm2repo}" ${settingsopts} ${mvn_opts} -Dreleaseplugin.version=2.5 -Dmaven.release.version=2.5 -B org.apache.maven.plugins:maven-release-plugin:2.5:clean org.apache.maven.plugins:maven-release-plugin:2.5:prepare -DpushChanges=false -Dtag="${preparationtag}" -DcompletionGoals="help:system" -DpreparationGoals="clean install" -DignoreSnapshots=${ignoresnapshots} -P"${profiles}" -Darguments="-Dmaven.repo.local=\"${localm2repo}\" -Dorg.ops4j.pax.url.mvn.localRepository=\"${localm2repo}\" ${settingsopts} ${mvn_opts} -P${profiles}" -l "${logsdir}/preparation-branch.log" || exit 1

# Remove completedPhase so we can reuse the release.properties from scratch
sed -i '/^completedPhase/d' release.properties

# Replace the released version with the timestamped versions only and
# only if we are NOT doing a major release
if [ ${domajor} == 0 ]; then
    # Now replace all the project.rel with the timestamped version
    sed -i "s/\(^project\.rel\.[^=]*\)=\(.*\)/\1=\2-${lockedversion}/" release.properties
fi

# Now save the repository in git bundle if a file is provided till this point
if [ ! "${gitbundlerepo}" == "" ]; then
    git bundle create "${gitbundlerepo}" "${preparationtag}" "${basebranch_initial}" "${basebranch}" "${preparationbranch}" ${updateversiontag}
fi

localreleasebranch="autorelease-branch-${lockedversion}"
localreleasetag="autorelease-tag-${lockedversion}"
if [ ${domajor} == 0 ]; then
    localreleasecommand="-Dtag=${localreleasetag}"
else
    localreleasecommand=""
    # Make sure to remove also the existing tag in case we want to
    # have maven to create the tag
    sed -i '/^scm\.tag/d' release.properties
fi

if [ ${cleanlocalm2repo} == 1 ]; then
    echo "Cleaning local m2repo before the autorelease-branch build"
    rm -rf "${localm2repo}"
fi

# Now attempt to do a release prepare, this time the branch will be the one will be pushed as well
# the tag that will be pushed
git checkout -f "${basebranch}" -b "${localreleasebranch}" && mvn -Dmaven.repo.local="${localm2repo}" -Dorg.ops4j.pax.url.mvn.localRepository="${localm2repo}" ${settingsopts} ${mvn_opts} -Dreleaseplugin.version=2.5 -Dmaven.release.version=2.5 -B org.apache.maven.plugins:maven-release-plugin:2.5:prepare -DpushChanges=false ${localreleasecommand} -DcompletionGoals="help:system" -DpreparationGoals="clean install" -DignoreSnapshots=${ignoresnapshots} "-P${profiles}" -Darguments="-Dmaven.repo.local=\"${localm2repo}\" -Dorg.ops4j.pax.url.mvn.localRepository=\"${localm2repo}\" ${settingsopts} ${mvn_opts} -P${profiles}" -l "${logsdir}/localrelease-branch.log" || exit 1

## By default pick a version for the gitbundles that is inline with
## the version of the bundles created, so to easily correlate
gitbundleversion="${lockedversion}"
releasetag="${localreleasetag}"
if [ -f "${basedir}/release.properties" ]; then
    releasetag=`grep "scm.tag=" "${basedir}/release.properties" | sed 's/scm.tag=//'`
    gitbundleversion=`echo ${releasetag} | grep  -o "[0-9]\+\\..*$"`
    if [ "${gitbundleversion}" == "" ]; then
        gitbundleversion="${lockedversion}"
    fi
fi

# Add a pointer tag to the scmtag, so we don't need to make guesses
git symbolic-ref refs/tags/scmtag refs/tags/${releasetag}

# Add a pointer tag to the next development version change
git symbolic-ref refs/tags/nextdev refs/heads/${localreleasebranch}

# Now save the repository in git bundle if a file is provided, including the localrelease branch and tag
if [ ! "${gitbundlerepo}" == "" ]; then
    git bundle create "${gitbundlerepo}" "${releasetag}" "${preparationtag}" "${basebranch_initial}" "${basebranch}" "${localreleasebranch}" "${preparationbranch}" ${updateversiontag} refs/tags/scmtag refs/tags/nextdev
fi

if [ ${cleanlocalm2repo} == 1 ]; then
    echo "Cleaning local m2repo before the localdeploy build"
    rm -rf "${localm2repo}"
fi

# Now try to do a local deployment to make sure we can deploy the files appropriately
git checkout -f "${releasetag}" && mvn -Dmaven.repo.local="${localm2repo}" -Dorg.ops4j.pax.url.mvn.localRepository="${localm2repo}" -DaltDeploymentRepository="localdir::default::file:///${localrepodir}" ${settingsopts} ${mvn_opts} "-P${profiles}" clean javadoc:jar source:jar deploy -l "${logsdir}/localdeploy.log" || exit 1

# Deploy also the git bundlerepo so we keep in the same context
if [ ! "${gitbundlerepo}" == "" ]; then
    project=`basename "${gitbundlerepo}"`
    mvn -Dmaven.repo.local="${localm2repo}" ${settingsopts} ${mvn_opts} -Durl="file:///${localrepodir}"  -DrepositoryId="localdir" -DgroupId="org.opendaylight.gitbundles" -DartifactId="${project}" -Dversion="${gitbundleversion}" -Dpackaging="gitbundle" -Dclassifier="gitbundle" -Dfile="${gitbundlerepo}" deploy:deploy-file -l "${logsdir}/localdeploy_gitbundle.log"
fi
echo "DONE LOCALRELEASE last result is: $?"

exit 0
